//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.1

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "authenticator")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false, column_type = "Text", unique)]
    pub credential_id: String,
    #[sea_orm(primary_key)]
    pub user_id: i32,
    #[sea_orm(column_type = "Text")]
    pub provider_account_id: String,
    #[sea_orm(column_type = "Text")]
    pub credential_public_key: String,
    pub counter: i32,
    #[sea_orm(column_type = "Text")]
    pub credential_device_type: String,
    pub credential_backed_up: bool,
    #[sea_orm(column_type = "Text", nullable)]
    pub transports: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::UserId",
        to = "super::user::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    User,
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
